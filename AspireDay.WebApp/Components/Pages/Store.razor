@page "/store"
@using AspireDay.Domain.Features.Orders.CreateBuyOrder
@using AspireDay.Domain.Features.Orders.GetBuyOrders
@using AspireDay.WebApp.Clients
@using AspireDay.WebApp.Services
@using Mapster
@using Microsoft.AspNetCore.SignalR.Client
@inject StoreApiClient StoreApi
@inject ISessionService SessionService
@rendermode InteractiveServer

<PageTitle>Store</PageTitle>

<h1>Store</h1>
<p>Orders Request</p>

@if (ShowSpinner)
{
    <div id="container">
        <SfSpinner @bind-Visible="@ShowSpinner">
        </SfSpinner>
    </div>
}
else
{
    <SfToast ID="toast_default" @ref="ToastRef" Title="Adaptive Tiles Meeting"
             Content="@ToastContent"
             Timeout="5000"
             Icon="e-meeting">
        <ToastPosition X="@ToastPosition"></ToastPosition>
    </SfToast>

    <div class="col-lg-12 control-section">

        <div class="content-wrapper">
            <div class="row">
                <SfGrid TValue="GetBuyOrderResponse" DataSource="@_orders" AllowPaging="true" AllowFiltering="true" Toolbar="@(new List<string>() { "Add", "Edit", "Delete", "Update", "Cancel" })">
                    <GridEditSettings AllowAdding="true" AllowEditing="true" AllowDeleting="true"></GridEditSettings>
                    <GridEvents OnActionBegin="OnActionBegin" TValue="GetBuyOrderResponse"></GridEvents>
                </SfGrid>
            </div>
        </div>
    </div>
}

@code {
    private IEnumerable<GetBuyOrderResponse>? _orders;
    private bool ShowSpinner { get; set; }
    private HubConnection? _hubConnection;
    SfToast ToastRef;
    private const string ToastPosition = "Right";
    private string ToastContent = "";

    protected override async Task OnInitializedAsync()
    {
        ShowSpinner = true;

        _hubConnection = new HubConnectionBuilder()
            .WithUrl(SessionService.SignalRServiceUri)
            .Build();

        _hubConnection.On<string>("NotifyBuyOrder", async (orderId) => { await UpdateOrders(); });
        await _hubConnection.StartAsync();
        _orders = await StoreApi.GetBuyOrdersAsync(SessionService.UserId);

        ShowSpinner = false;
    }

    public async Task OnActionBegin(ActionEventArgs<GetBuyOrderResponse> args)
    {
        switch (args.RequestType)
        {
            case Syncfusion.Blazor.Grids.Action.BeginEdit:
                break;
            case Syncfusion.Blazor.Grids.Action.Add:
                args.Data.UserId = SessionService.UserId;
                args.Data.ProductId = Guid.NewGuid();
                break;
            case Syncfusion.Blazor.Grids.Action.Save:
                ShowSpinner = true;
                await StoreApi.CreateBuyOrderAsync(args.Data.Adapt<CreateBuyOrderModel>());
                ShowSpinner = false;
                ToastContent = "Order Request Created";
                await ToastRef.ShowAsync();
                break;
            case Syncfusion.Blazor.Grids.Action.Delete:
                await StoreApi.DeleteBuyOrderAsync(args.Data.OrderId);
                break;
        }
    }

    private async ValueTask UpdateOrders()
    {
        _orders = await StoreApi.GetBuyOrdersAsync(SessionService.UserId);
        ToastContent = "Orders list has been updated";
        await ToastRef.ShowAsync();
        await InvokeAsync(StateHasChanged);
    }

    public async ValueTask DisposeAsync()
    {
        if (_hubConnection is not null)
        {
            await _hubConnection.DisposeAsync();
        }
    }
}