@page "/store"
@using AspireDay.Domain.Features.Orders.CreateBuyOrder
@using AspireDay.Domain.Features.Orders.GetBuyOrders
@using AspireDay.WebApp.Clients
@using Microsoft.AspNetCore.SignalR.Client
@attribute [StreamRendering]
@inject StoreApiClient StoreApi
@inject ILogger<Store> Logger;

<PageTitle>Store</PageTitle>

<h1>Store</h1>

<p>Orders Request</p>

@if (Orders == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <form method="post" @onsubmit="Submit" @formname="store-form">
        <AntiforgeryToken/>
        <div class="form-group row">

            <div>
                <label class="col-sm-2 col-form-label">
                    Product Id:
                    <InputText @bind-Value="Model!.ProductId" class="form-control"/>
                </label>
            </div>

            <div>
                <label class="col-sm-2 col-form-label">
                    User Id:
                    <InputText @bind-Value="Model!.UserId" class="form-control"/>
                </label>
            </div>

            <div>
                <label class="col-sm-2 col-form-label">
                    Quantity:
                    <InputNumber @bind-Value="Model!.Quantity" class="form-control"/>
                </label>

            </div>

            <div>
                <label class="col-sm-2 col-form-label">
                    Price:
                    <InputNumber @bind-Value="Model!.Price" class="form-control"/>
                </label>
            </div>

            <div>
                <button type="submit" class="btn btn-primary m-1">Submit</button>
            </div>

        </div>
    </form>
    
    <table class="table">
        <thead>
        <tr>
            <th>Order Id</th>
            <th>User Id</th>
            <th>Product Id</th>
            <th>Quantity</th>
            <th>Price</th>
            <th>Total</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var order in Orders)
        {
            <tr>
                <td>@order.OrderId</td>
                <td>@order.UserId</td>
                <td>@order.ProductId</td>
                <td>@order.Quantity</td>
                <td>@order.Price</td>
                <td>@(order.Quantity * order.Price)</td>
            </tr>
        }
        </tbody>
    </table>
}

@code {
    public List<GetBuyOrderResponse>? Orders;
    [SupplyParameterFromForm] 
    public CreateBuyOrderModel? Model { get; set; } = new ();
    private HubConnection? _hubConnection;

    protected override async Task OnInitializedAsync()
    {
        _hubConnection = new HubConnectionBuilder()
            .WithUrl("http://localhost:5064/Store")
            .Build();

        _hubConnection.On<string>("NotifyBuyOrder", async (orderId) =>
        {
            Logger.LogInformation("Old Orders Count - {Count}", Orders.Count);
            Orders = await StoreApi.GetBuyOrdersAsync(Guid.Parse("f07a8ade-a1d6-4dc8-9b09-17d37ff61b65"));
            Logger.LogInformation("New Orders Count - {Count}", Orders.Count);
            await InvokeAsync(StateHasChanged);
        });

        await _hubConnection.StartAsync();
        
        Orders = await StoreApi.GetBuyOrdersAsync(Guid.Parse("f07a8ade-a1d6-4dc8-9b09-17d37ff61b65"));
    }

    private async Task Submit()
    {
        Logger.LogInformation(Model.ProductId);
        await StoreApi.CreateBuyOrderAsync(Model);
        Model = new CreateBuyOrderModel();
    }
    
    public async ValueTask DisposeAsync()
    {
        if (_hubConnection is not null)
        {
            await _hubConnection.DisposeAsync();
        }
    }
}