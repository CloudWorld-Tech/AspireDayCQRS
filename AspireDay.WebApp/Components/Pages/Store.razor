@page "/store"
@using AspireDay.Domain.Features.Orders.CreateBuyOrder
@using AspireDay.Domain.Features.Orders.GetBuyOrders
@using AspireDay.WebApp.Clients
@using Mapster
@using Microsoft.AspNetCore.SignalR.Client
@using Syncfusion.Blazor.Inputs
@inject StoreApiClient StoreApi
@inject ILogger<Store> Logger;
@using Syncfusion.Blazor.Notifications
@rendermode InteractiveServer

<PageTitle>Store</PageTitle>

<h1>Store</h1>

<p>Orders Request</p>

@if (_orders == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <div class="control-section toast-default-section">

        <SfToast @ref="ToastObj" Title="Anjolie Stokes" Width="230" Height="250" Content="@ToastContent" Timeout="@ToastTimeOut">
            <ToastPosition X="Right" Y="Bottom"></ToastPosition>
            <ToastButtons>
                <ToastButton Content="Ignore" OnClick="@HideToast"></ToastButton>
                <ToastButton Content="reply"></ToastButton>
            </ToastButtons>
        </SfToast>

        <div class="col-lg-12 control-section">
            <div class="content-wrapper">
                <div class="row">
                    <SfGrid TValue="GetBuyOrderResponse" DataSource="@_orders" AllowPaging="true" AllowFiltering="true" Toolbar="@(new List<string>() { "Add", "Edit", "Delete", "Update", "Cancel" })">
                        <GridEditSettings AllowAdding="true" AllowEditing="true" AllowDeleting="true"></GridEditSettings>
                        <GridEvents OnActionBegin="OnActionBegin" TValue="GetBuyOrderResponse"></GridEvents>
                    </SfGrid>
                </div>
            </div>
        </div>
    </div>
}

@code {
    SfToast ToastObj;
    private IEnumerable<GetBuyOrderResponse>? _orders;
    private int ToastTimeOut { get; set; } = 10000;
    private string ToastContent { get; set; } = "<p><img src='https://blazor.syncfusion.com/demos/images/toast/laura.png'></p>";
    [SupplyParameterFromForm] public CreateBuyOrderModel? Model { get; set; } = new();
    private HubConnection? _hubConnection;

    protected override async Task OnInitializedAsync()
    {
        _hubConnection = new HubConnectionBuilder()
            .WithUrl("http://localhost:5064/Store")
            .Build();

        _hubConnection.On<string>("NotifyBuyOrder", async (orderId) =>
        {
            Logger.LogWarning("Old Orders Count - {Count}", _orders?.Count());
            await UpdateOrders();
        });

        await _hubConnection.StartAsync();

        _orders = await StoreApi.GetBuyOrdersAsync(Guid.Parse("f07a8ade-a1d6-4dc8-9b09-17d37ff61b65"));
    }

    public async Task OnActionBegin(ActionEventArgs<GetBuyOrderResponse> args)
    {
        switch (args.RequestType)
        {
            case Syncfusion.Blazor.Grids.Action.BeginEdit:
                break;
            case Syncfusion.Blazor.Grids.Action.Add:
                args.Data.UserId = Guid.Parse("f07a8ade-a1d6-4dc8-9b09-17d37ff61b65");
                args.Data.ProductId = Guid.NewGuid();
                await ToastObj.ShowAsync();
                break;
            case Syncfusion.Blazor.Grids.Action.Save:
                await StoreApi.CreateBuyOrderAsync(args.Data.Adapt<CreateBuyOrderModel>());
                break;
            case Syncfusion.Blazor.Grids.Action.Delete:
                break;
        }
    }

    private async ValueTask UpdateOrders()
    {
        _orders = await StoreApi.GetBuyOrdersAsync(Guid.Parse("f07a8ade-a1d6-4dc8-9b09-17d37ff61b65"));
        await InvokeAsync(StateHasChanged);
    }

    private async Task HideToast()
    {
        await ToastObj.HideAsync();
    }

    public async ValueTask DisposeAsync()
    {
        if (_hubConnection is not null)
        {
            await _hubConnection.DisposeAsync();
        }
    }

}